const express = require('express');
const cors = require('cors');
require('dotenv').config();
const db = require('./Config/db.config');
const http = require('http');
const WebSocket = require('ws');

const app = express();
const server = http.createServer(app);

// WebSocket server
const wss = new WebSocket.Server({ server });

const clients = new Map(); // Map: playerId => WebSocket
const readyPlayers = new Map(); // Map gameId ‚Üí Set playerId ƒë√£ s·∫µn s√†ng

wss.on('connection', (ws, req) => {
    console.log('üîå M·ªôt client ƒë√£ k·∫øt n·ªëi WebSocket');

    ws.once('message', (msg) => {
        try {
            const data = JSON.parse(msg);
            if (data.type === 'register') {
                const playerId = data.player_Id;
                clients.set(playerId, ws);
                console.log(`‚úÖ Player ${playerId} ƒë√£ ƒëƒÉng k√Ω`);
                console.log("üß© clients hi·ªán t·∫°i:", Array.from(clients.keys()));

                ws.on('message', (msg) => {
                    try {
                        const parsed = JSON.parse(msg);

                        if (parsed.action === 'send_message') {
                            const { senderId, receiverId, content } = parsed;
                            console.log(`üí¨ ${senderId} ‚Üí ${receiverId}: ${content}`);

                            const payload = JSON.stringify({
                                type: 'new_message',
                                data: {
                                    senderId,
                                    content,
                                    timestamp: new Date().toISOString()
                                }
                            });

                            const receiverSocket = clients.get(receiverId);
                            if (receiverSocket && receiverSocket.readyState === WebSocket.OPEN) {
                                receiverSocket.send(payload);
                                console.log(`üì® G·ª≠i realtime t·ªõi receiver ${receiverId}`);
                            }

                            const senderSocket = clients.get(senderId);
                            if (senderSocket && senderSocket.readyState === WebSocket.OPEN) {
                                senderSocket.send(payload);
                                console.log(`üîÅ G·ª≠i realtime l·∫°i cho sender ${senderId}`);
                            }
                        }
                        else if (parsed.action === 'send_friend_request') {
                            const { fromId, toId, fromName } = parsed;

                            const payload = JSON.stringify({
                                type: 'friend_notify',
                                fromId,
                                fromName
                            });

                            const targetSocket = clients.get(toId);
                            if (targetSocket && targetSocket.readyState === WebSocket.OPEN) {
                                targetSocket.send(payload);
                                console.log(`ü§ù G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n t·ª´ ${fromName} (id=${fromId}) ƒë·∫øn ${toId}`);
                            }
                        }
                        // Khi m·ªôt ng∆∞·ªùi tham gia ph√≤ng
                        else if (parsed.action === 'join_room') {
                            const { roomCode, playerId, playerName, role, targetId } = parsed;

                            const payload = JSON.stringify({
                                type: 'room_update',
                                action: 'join',
                                playerId,
                                playerName,
                                role
                            });

                            const targetSocket = clients.get(targetId);
                            if (targetSocket && targetSocket.readyState === WebSocket.OPEN) {
                                targetSocket.send(payload);
                                console.log(`üîî ${playerName} ƒë√£ v√†o ph√≤ng ${roomCode} ‚Üí g·ª≠i ƒë·∫øn ${targetId}`);
                            }
                        }
                        else if (parsed.action === 'leave_room') {
                            const { roomCode, playerId, playerName, role, targetId } = parsed;

                            const payload = JSON.stringify({
                                type: 'room_update',
                                action: 'leave',
                                playerId,
                                playerName,
                                role
                            });

                            const targetSocket = clients.get(targetId);
                            if (targetSocket && targetSocket.readyState === WebSocket.OPEN) {
                                targetSocket.send(payload);
                                console.log(`üö™ ${playerName} ƒë√£ r·ªùi ph√≤ng ${roomCode} ‚Üí g·ª≠i ƒë·∫øn ${targetId}`);
                            }
                        }
                        else if (parsed.action === 'close_room') {
                            const { roomCode, ownerId, guestId } = parsed;

                            const payload = JSON.stringify({
                                type: 'room_update',
                                action: 'closed',
                                roomCode
                            });

                            [ownerId, guestId].forEach(id => {
                                const socket = clients.get(id);
                                if (socket && socket.readyState === WebSocket.OPEN) {
                                    socket.send(payload);
                                    console.log(`‚ùå G·ª≠i t√≠n hi·ªáu ƒë√≥ng ph√≤ng t·ªõi player ${id}`);
                                }
                            });
                        }
                        else if (parsed.action === 'start_game') {
                            const { ownerId, guestId, roomCode, gameId } = parsed;

                            // X√≥a tr·∫°ng th√°i readyPlayers c≈© khi b·∫Øt ƒë·∫ßu game m·ªõi
                            if (readyPlayers.has(gameId)) {
                                readyPlayers.delete(gameId);
                                console.log(`üßπ X√≥a tr·∫°ng th√°i readyPlayers cho game ${gameId}`);
                            }

                            const payload = JSON.stringify({
                                type: 'goto_place_ship',
                                roomCode: roomCode,
                                gameId: gameId,
                                ownerId: ownerId,
                                guestId: guestId,
                                message: 'C·∫£ hai ƒë√£ s·∫µn s√†ng, chuy·ªÉn ƒë·∫øn scene ƒë·∫∑t t√†u!'
                            });

                            [ownerId, guestId].forEach(pid => {
                                const wsClient = clients.get(pid);
                                if (wsClient && wsClient.readyState === WebSocket.OPEN) {
                                    wsClient.send(payload);
                                    console.log(`üöÄ G·ª≠i goto_place_ship t·ªõi player ${pid} (gameId: ${gameId})`);
                                }
                            });
                        }
                        else if (parsed.action === 'ready_place_ship') {
                            const { gameId, playerId, opponentId } = parsed;
                            console.log(`üì¶ Player ${playerId} ƒë√£ s·∫µn s√†ng ƒë·∫∑t t√†u (game ${gameId})`);

                            // Kh·ªüi t·∫°o l·∫°i set cho gameId m·ªõi
                            if (!readyPlayers.has(gameId)) {
                                readyPlayers.set(gameId, new Set());
                            }

                            // Th√™m playerId v√†o set ready
                            const currentReadySet = readyPlayers.get(gameId);
                            currentReadySet.add(playerId);
                            console.log(`üïí readyPlayers cho game ${gameId}: ${Array.from(currentReadySet)}`);

                            // Ki·ªÉm tra n·∫øu c·∫£ hai ng∆∞·ªùi ch∆°i ƒë·ªÅu s·∫µn s√†ng trong c√πng m·ªôt game
                            const allPlayers = new Set([playerId, opponentId]);
                            if (currentReadySet.size === 2 && [...currentReadySet].every(id => allPlayers.has(id))) {
                                const payload = JSON.stringify({
                                    type: 'start_countdown'
                                });

                                const socketA = clients.get(playerId);
                                const socketB = clients.get(opponentId);

                                if (socketA && socketA.readyState === WebSocket.OPEN) socketA.send(payload);
                                if (socketB && socketB.readyState === WebSocket.OPEN) socketB.send(payload);

                                console.log(`üöÄ B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c cho game ${gameId} v·ªõi ${playerId} v√† ${opponentId}`);
                                readyPlayers.delete(gameId); // X√≥a tr·∫°ng th√°i sau khi ho√†n t·∫•t
                            } else {
                                console.log(`‚è≥ Ch·ªù ${opponentId} s·∫µn s√†ng cho game ${gameId}, hi·ªán t·∫°i: ${currentReadySet.size}/2`);
                            }
                        }
                        // üëâ X·ª≠ l√Ω chuy·ªÉn l∆∞·ª£t gi·ªØa ng∆∞·ªùi ch∆°i
                        else if (data.type === 'switch_turn') {
                        const { fromPlayerId, toPlayerId } = data;
                        const targetSocket = clients.get(toPlayerId);
                        
                        if (targetSocket && targetSocket.readyState === WebSocket.OPEN) {
                            targetSocket.send(JSON.stringify({
                            type: 'switch_turn',
                            fromPlayerId,
                            toPlayerId
                            }));
                            console.log(`üîÑ G·ª≠i switch_turn t·ª´ ${fromPlayerId} ‚Üí ${toPlayerId}`);
                        } else {
                            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y socket ho·∫∑c socket ƒë√≥ng cho toPlayerId: ${toPlayerId}`);
                        }
                        }
                    } catch (e) {
                        console.error('‚ùå L·ªói x·ª≠ l√Ω message:', e.message);
                    }
                });

                ws.on('close', () => {
                    clients.delete(playerId);
                    console.log(`‚ùå Player ${playerId} ng·∫Øt k·∫øt n·ªëi`);
                });
            }
        } catch (e) {
            console.error('‚ùå L·ªói ƒëƒÉng k√Ω playerId:', e.message);
        }
    });
});

// Express middleware & routes
app.use(cors({
    origin: '*'
}));

app.use(express.json());

const authRoutes = require('./Routes/Auth.route');
const GameplayRoutes = require('./Routes/Gameplay.route');
const displayRoutes = require('./Routes/Display.route');
const roomRoutes = require('./Routes/Room.route');
const friendRoutes = require('./Routes/Friend.route');
const messageRoutes = require('./Routes/Message.route');

app.use('/api/auth', authRoutes);
app.use('/api/gameplay', GameplayRoutes);
app.use('/api/room', roomRoutes);
app.use('/api/display', displayRoutes);
app.use('/api/friend', friendRoutes);
app.use('/api/message', messageRoutes);

app.get('/', (req, res) => {
    res.send('üåê Server HTTP + WebSocket ƒëang ch·∫°y üöÄ');
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ Server HTTP + WebSocket ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});